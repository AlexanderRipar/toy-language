let x = 1.2

/*
1.2

1 + 2

1 << 3

if 1 == 2 || 'c' == 'w' { {} } else {  }

for x, i <- xs {
	f(x, i)
}

let x = .{ .x.y = 1, 2, 3 }

mut m: Struct(x: Struct(y: u32, z: u32), a: u32, b: u32) = x
*/

/*
for e, i <- es where es = { bla() } {
	print("{}: {}", i, e)
}

switch m where m = {
	let y = 1

	if x where x = if y where y = 1 then 1 else 0 then a else b

	5
}, k = 2.5
case 5 -> 2
case _ -> 0

for i < 10, i += 1 where i = 0 do {
	print(i)
}


let i: u8 = eval 1 + 1
*/

/*
for i < 5, i += 1 where i = 0 do {}

y = 2 - 3

1 * 2 + 3

1 - 2 + 3

1 catch e -> 2

1 + (2 * 3)

5 + (x.*.y.z catch e -> 3 * 4)

5 + (x.*.y.z(1, 2, 3,)(w()) catch e -> 3 * 4)

let add = func(x: uint, y: uint) -> uint = x + y

let x = [n]T

let x = [...](y[0 + [T.x]s] + 1)

let y = f(.x = x, y = y + 3)

let parens = ((1 + 1) * 2 + x)

let array_index = x[0]

let complex_array_index = ((x[(0 + 1)]) + (3)) * 4

let array_type = [5]T

let empty_call = f()

let single_arg_call = f(1)

let x = (1 + 2) * 3

let two_arg_call = f(1, 2, 3)

let x = f(1)

let f = switch x where let x = 1
	case 1 -> { "x" }
	case 2 -> "y"

for x < 10, x += 1 where mut x = 0, let y: u32 = 3 do
	bla()

let f = func(let x: u32, let y: u32) -> u32 = x + y

let g = func(x: u32) = x * 2

for x, y <- v where
	v = get_vs()
do
	f(x, x * 2)

let y = try f()

let z = f() catch v -> {
	log(v)

	0
}

for i < 10, i += 1 where mut i = 0
{

}

if x.y where
	x = get_something(),
	y = 3
then
	bla(x)


for i < 100 {

}

use pub mut global my_string_variable = "hello world"

my_string_variable = "Another string:o" // does not compile

let Vector2 = Struct(
	let x: u32,

	let y: u32
)

let Vector3 = Struct(
	use v2: Vector2,

	let z: u32
)

let TU = Struct(

	let tag: u32,

	use u: Union(
		let a: u32,

		let b: *byte
	)
)

let v: Vector3 = .{ .x = 1, .y = 2, .z = 3 }

v.x

use code = import("path/to/file")

x = 3

// in other file:

pub mut x = 5

let y: [?]u32 = nil

let printable_ascii = 'h' // U+68

let control_ascii = '\r' // U+0D (carriage return)

let unicode = 'Ãœ' // U+DC

let f = 1.0

let Equiv = trait(T) = {
	let equal = func(lhs: T, rhs: T) -> bool = !unequal(lhs, rhs)

	let unequal = func(lhs: T, rhs: T) -> bool = !equal(lhs, rhs)
}

let Ordered = trait(T) = {
	let less_than = func(lhs: T, rhs: T) -> bool = !greater_than(lhs, rhs) && !equal(lhs, rhs)

	let greater_than = func(lhs: T, rhs: T) -> bool = !less_than(lhs, rhs) && !equal(lhs, rhs)

	let less_than_equal = func(lhs: T, rhs: T) -> bool = less_than(lhs, rhs) || equal(lhs, rhs)

	let greater_than_equal = func(lhs: T, rhs: T) -> bool = greater_than(lhs, rhs) || equal(lhs, rhs)
}

let NatNum = trait(T) expects Ordered(T) = {
	let add = func(lhs: T, rhs: T) -> T

	let mul = func(lhs: T, rhs: T) -> T
}

let WholeNum = trait(T) expects NatNum(T) = {
	let neg = func(arg: T) -> T

	let sub = func(lhs: T, rhs: T) -> T = lhs + neg(rhs)

	let zero = func() -> T
}

let Vec2f32 = Struct(
	let x: f32,
	let y: f32,
)

impl WholeNum(Vec2f32) = {
	let equal = func(lhs: Vec2f32, rhs: Vec2f32) -> bool = lhs.x == rhs.x && lhs.x == rhs.x

	let less_than = func(lhs: Vec2f32, rhs: Vec2f32) -> bool = lhs.x < rhs.x || (lhs.x == rhs.x && lhs.y < rhs.y)

	let add = func(lhs: Vec2f32, rhs: Vec2f32) -> Vec2f32 = .{
		lhs.x + rhs.x,
		lhs.y + rhs.y,
	}

	let mul = func(lhs: Vec2f32, rhs: Vec2f32) -> Vec2f32 = .{
		lhs.x * rhs.x,
		lhs.y * rhs.y,
	}

	let neg = func(arg: Vec2f32) -> Vec2f32 = .{
		-lhs.x,
		-rhs.y
	}

	let zero = func() -> Vec2f32 = .{
		0.0,
		0.0,
	}
}

let abs = func(x: T) expects WholeNum(T) ensures _ > 0
	= if x < 0 then -x else x

switch m where m = {
	let y = 1

	if x where x = if y where y = 1 then 1 else 0 then a else b

	5
}
case 5 -> 2
case _ -> 0
*/
