let comptime_one = 1

let u32_one: u32 = 1



let func_to_1 = func(a: u32) -> u32 => 1

let u32_identity = func(a: u32) -> u32 => a



let u32_one_equality = func(a: u32) -> Bool => a == 1

let u32_equality = func(a: u32, b: u32) -> Bool => a == b



let void_func = func() -> Void => {}

let u32_identity_with_block = func(a: u32) -> u32 => { a }

let u32_from_block = u32_identity_with_block(42)

let u32_identity_with_block_and_one_definition = func(a: u32) -> u32 => {
	let n = a

	a
}

let u32_identity_with_block_and_two_definitions = func(a: u32) -> u32 => {
	let b = a

	let c = b

	c
}



let TypeIdentity = func(T: Type) -> Type => T

let type_identity_bool_true: TypeIdentity(Bool) = 1 == 1



let func_with_inner_type_definition = func() -> Void => {
	let Tj: Type = u32

	{}
}

let call_with_block = func_with_inner_type_definition()

let func_with_inner_type_definition_and_use = func() -> Void => {
	let Tj: Type = u32

	let tj: Tj = 1

	{}
}

let generic_identity = func(eval TheType: Type, t: TheType) -> TheType => t

let map_single = func(eval AType: Type, t: AType, tf: func(x: AType) -> AType) -> AType => tf(t)

let generic_identity_u32 = generic_identity(u32, 1)

let generic_identity_bool = generic_identity(Bool, false)

let map_single_u32 = map_single(u32, 1, func(x: u32) -> u32 => x)

let map_single_bool = map_single(Bool, false, func(x: Bool) -> Bool => x)

let ten_u32s: [10]u32 = .[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

let five = ten_u32s[4]

let five_u64s_by_name: [five]u64 = .[0, 1, 2, 3, 4]

let five_u64s_by_value: [ten_u32s[4]]u64 = .[5, 6, 7, 8, 9]

let a_one: u32 = 1

let a_one_from_another_one: u32 = a_one

let init_array_of_seven = func(T: Type, t: T) -> [7]T => .[t, t, t, t, t, t, t]

let array_of_seven_u32_ones = init_array_of_seven(u32, 1)

let array_of_one_bool: [array_of_seven_u32_ones[6]]Bool = .[true]
