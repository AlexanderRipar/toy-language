an_array :: *mut []i32 = get_ints()

MyPointStruct ::= struct(
	x : u32,
	y : u32
)

a := f()

min :: proc(a : T, b : T) -> T =
	if a < b then a else b

to_name :: proc(x : Bla) -> std.Strview =
	std.Strview.create(
		switch x
		case A => "a"
		case B => "b"
		case C, D => "c"
		case _ => "?"
	)

main :: proc -> i32 =
{

	// Simple catch with that provides a default value
	x := maybe_error1() catch 0

	// More involved catch that uses the actual error and returns for one
	// specific error
	y := maybe_error2() catch e -> {
		if (e == SomeError)
			return 1

		0
	}

	return x + y
}

MyTrait :: pub trait(a :: Type) = {}

impl MyTrait(i32) {}

add :: func(a : isz, b : isz) = a + b

variadics :: proc(vargs : ...i32) -> void = {}

a_multiptr :: [*]u32

ref_func :: func(a : &i32) -> i32 = a + 1

MyTailStruct ::= Struct(
	count : u32,
	tail : [...]*i32
)

SomewhatComplexType ::= [][]*mut f32

paren_test := ((a + b) * c) - (d + e * f)
